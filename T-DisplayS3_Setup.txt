To begin...you need to download the Zip file from LilyGO's own GitHub:
https://github.com/Xinyuan-LilyGO/T-Display-S3
by pressing the green button "Code" and after downloading, expand the Zip.

In your libraries delete folders “TFT_eSPI" and ‘lvgl" and delete the file “lv_conf.h”
Download the latest LilyGO T-Display S3 zip from GitHub.
Expand LilyGO’s zip file and…
Drag the folder called "T-Display-S3-main” into your libraries folder.
Inside the folder T-Display-S3-main there is a folder called “lib”.
Copy the CONTENTS of the folder “lib” (not the actual folder “lib”)  into your 
libraries folder and then check that “lib” is empty and delete it.
Your libraries folder should now contain folders called:
lvgl
T-Display-S3-main
TFT_eSPI
and a file called
lv_conf.h
*******
Update:
Due to rancour on the LilyGO T-Display S3 GitHub Issues section regarding not 
being able to update the TFT_eSPI without losing the display. 
Bodmer was approached and finally made the board work with the standard version 
TFT_eSPI GitHub AND be updatable in Arduino IDE. The main issue was that LilyGO 
used a more exotic 8bit parallel interface, rather that SPI.
You may now do an "Arduino Libraries Update" to the "TFT_eSPI" library but make 
sure the Arduino version is "version=2.5.x” 
(the current version as of July2, 2023 is version=2.5.30).
Or you may  use the standard "TFT_eSPI" library from Bodmer! 
But...
If you do an update you will have to edit the "User_Setup_Select.h" to comment-out the line:

"//#include <User_Setup.h> // Default setup is root library folder"

and un-comment:

"#include <User_Setups/Setup206_LilyGo_T_Display_S3.h> // For the LilyGo T-Display S3 based ESP32S3 with ST7789 170 x 320 TFT"

which is about halfway down the huge file of setups.
This way you can safely "keep current" without fear.
Both ways work: You can use the LilyGO supplied TFT_eSPI which does not require
editing the User Setup OR:
Download the latest update and edit the "User_Setup_Select.h", your choice!
(You will find an edited copy of "User_Setup_Select.h" here in may repository)

Now:
Step 1, below, requires that you have already installed the ESP32 board 
definitions and are using the latest version (I use ver 2.0.6 - 2.0.9.). 
It is also assumed that you have installed Arduino IDE, ver 1 or 2.
(This is covered in many tutorials online, so I will be brief)
If your Arduino IDE does not already have "ESP32 Arduino" (or simply esp32) 
as shown paste this:
https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
into Arduino Preferences, Additional Boards Manager.
Goto Boards manager and select esp32 by Espressif Systems, ver 2.0.6 and wait for it to load...
From the upper menu "Arduino Tools", Board: select ESP32 Arduino, ESP32S3 Dev Module. Right at the top!
Please see attached screenshot, "Arduino_Config.png"
Make sure that you change:
Flash Size to 16M
Partition Scheme to "Huge APP (3MB No OTA/1MB SPIFFS)"
PSRAM: "OPI PSRAM"

To enable serial monitor function for debugging, etc, be sure to also set 
USB CDC On Boot "Enabled".
All settings shown, run on my computer just as shown.

If you are NOT running one of my sketches, you should add:

  #define PIN_POWER_ON 15  // LCD and battery Power Enable
  #define PIN_LCD_BL 38    // BackLight enable pin (see Dimming.txt)

just before the setup and then in setup add:
  pinMode(PIN_POWER_ON, OUTPUT);  //triggers the LCD backlight
  pinMode(PIN_LCD_BL, OUTPUT);    // BackLight enable pin
  
  digitalWrite(PIN_POWER_ON, HIGH);
  digitalWrite(PIN_LCD_BL, HIGH);

My repository contains two examples of simple documented easy to understand program code. 
The first one to try is "HotHead.ino" which demos most of the common things you need to program this board:

Step 1) Include an image (My hothead.h logo needs to be in the same folder as each sketch).
Step 2) Demonstrate the very high speed graphics made possible by an old school 8 bit 
parallel interface to the LCD instead of SPI or I2C. (A 50 year old concept, lost and forgotten.)
Step 3) The left button (marked "BOT" beside the USB connector) changes the highlighting of the rectangle
text showing "left pin 0" to now show "LEFT" 
(and right button marked "KEY”… highlights the right).

Open the code and read and understand it and you're good to go. 
Try pushing both buttons at once!
The rest of the code is simple and helps you make your own programs.
The second program is: "HotHead_temp_sensor.ino" which just substitutes
a I2C temperature sensor in place of the progress bar.
The sensor is an M5Stack ENV type, but both Adafruit and DFRobot make a 
similar board, but possibly a different I2C address. This is 0x44, but some
are 0x45.
Instead of a library to try and find, I put the sensor code right in line
with the sketch. This also helps you understand how I2C works!!!


Solutions to common startup issues:
A) Unit seems "bricked" 
   LCD does not display, unit remains dark with no white backlight:
	In declarations add 
        #define PIN_POWER_ON 15  // LCD and battery Power Enable
	#define PIN_LCD_BL 38    // BackLight enable pin (see Dimming.txt)
	Then in setup add
	pinMode(PIN_POWER_ON, OUTPUT); 	
	pinMode(PIN_LCD_BL, OUTPUT); 	
	digitalWrite(PIN_POWER_ON, HIGH);)	
	digitalWrite(PIN_LCD_BL, HIGH);)	

B) Cannot see Serial.Print on Arduino Serial Monitor
	To enable serial monitor function for debugging, you must also set 
	USB CDC On Boot "Enabled"
	in the Arduino board parameters

C) Can run on USB power but not battery connector:
	In declarations add
	#define PIN_POWER_ON 15		// just before the setup and then in setup add:
	pinMode(PIN_POWER_ON, OUTPUT); 	//"triggers the LCD backlight, and enables battery power
	digitalWrite(PIN_POWER_ON, HIGH);)	//on startup"
	
	(LilyGO variously refers to them as "LCD power on" OR "PIN_POWER_ON")
	Thanks to user RobLatour for finding this cure for the battery issue!
	
D) In the Port Selection, if the USB flickers on and off and you cannot upload, you may have to 
	manually enter "Upload Mode".
	This can be caused by a faulty sketch that is running at high speed with no delay at the 
	end of the loop, or working with Dual Cores.
 	To enter Upload Mode:
	press Boot and hold, press reset and release, then release Boot and go it into "Upload Mode"
	
E) When the board is shipped, the "factory.ino" sketch is calling for ESPTouch which is an app from 
	Espressif to transfer your WiFi SSID and Password from your phone to the board and enable the
	board to go online to China. This will enable a cool clock app that has a digital flip card 
	style of retro alarm clock. 
	You can bypass ESPTouch by editing the pin_config.h in the "factory" folder with your SSID and
	Password.
F) Even after uploading the HotHead sketch you get no image on the LCD, just black or white background, 
	but you can see the Tick/Tock in Serial Monitor:
	You may not have copied ALL the files from the LilyGO repository and fully replaced the ones in
	your Libraries folder or you did NOT resist the temptation to do an Arduino Library Update!
	The current Arduino Library for TFT_eSPI is now Bodmer's official v2.5 but there are still setups to do.
	
Pro-Tip:
	If you have several different boards using TFT_eSPI library and you have installed V2.5 in your libraries
	you still need to find "User_Setup_Select.h" file and select the LilyGO T-Display S3 halfway down by
	un-commenting it and no others. (At the top of the file there is a reference to
	User_Setup.h that needs to be commented-out.

You got here!
Addendum: 
<on-board LED colours and function:>
	Green LED indicates board is powered up (Power Enabled) using either USB or Battery
	Red   LED indicates Board is powered up by USB only and indicates that the battery is being charged

The T-Display S3 LCD backlight can be dimmed by following the instructions in:
LCD DimmerNEW.txt in this repository or try the HotHead_DimmerNEW example.

I added a text called "setup.h" in the .ino folder for convenience. 
While setting up the multiple config settings, you can glance at the included list!

You can email me at teastain@me.com
I'm open to suggestions!
-Terry
